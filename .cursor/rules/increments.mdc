---
alwaysApply: true
---

# Increment Method (Lean TDD for Humans + LLMs)

A lightweight structure to drive incremental, measurable progress without heavy process. Two artifacts per increment:

- Increment Charter (IC): source-of-truth plan for the increment
- Increment Log (IL): short running log after each meaningful change (commit/PR/LLM update)

## Goals

- Preserve necessary context for deep-dives while trimming irrelevant detail
- Make progress measurable with test-first (TDD) ACs
- Enable any human/agent to resume quickly

## Naming

- Increments: `pi-1`, `pi-2`, ...
- Files: `docs/increments/pi-1/charter.md`, `docs/increments/pi-1/log.md`

## Current Increment Identification

**For Humans and LLMs:** The current active increment is the earliest increment that is **not marked as Done**.

- **Completed increments** are marked with ‚úÖ Done status in their charter
- **Current increment** is the first one without Done status
- **Future increments** may exist in draft form but are not active

Example progression:

- PI-1: ‚úÖ Done (completed)
- PI-2: ‚úÖ Done (completed)
- PI-3: üîÑ In progress (current - work here)
- PI-4: üìã Draft (future - don't start yet)

Always check increment status before assuming which is current!

## Increment Charter (IC)

Contains:

- Context Capsule: high-level aim + constraints to keep efforts aligned
- Focus: 1‚Äì2 sentences describing the slice we‚Äôre shipping
- Prioritized ACs: cornerstone acceptance criteria for the slice
- Efforts: list of efforts; for each: tasks, ACs, tests (TDD), steps, estimate (S/M/L), status checklist
- Scope Fence: what is intentionally out-of-scope for this increment
- Exit Criteria: what makes the increment done (all tests pass; demoable)

## Increment Log (IL)

- Each entry starts with a 1‚Äì2 sentence Summary in plain, concise English
- Short bullets: action, files touched, decisions, issues, learnings, tests/artifacts
- Keep it terse; 3‚Äì6 bullets per entry

## TDD Loop (for each task)

1. Define/confirm ACs and tests
2. Write tests/fixtures (fail)
3. Implement minimal code
4. Make tests pass; refactor
5. Update IC status; add IL entry (include links/screens)

## Context Management

- IC holds the current ‚Äúcontext capsule‚Äù ‚Äì copy forward and prune each increment
- IL references decisions; only key decisions graduate into ADRs (optional)

## Feedback Assessment Process

Use `/p -f <feedback>` to submit concerns, feature requests, or ideas for contextual evaluation:

- **Context Analysis**: Feedback assessed against completed work, current increment, PRD goals, and roadmap
- **Categorization**: Already Planned, Enhancement, New Feature, Concern/Risk, or Process Improvement
- **Priority Assessment**: Immediate (current increment), Next Increment, Backlog, or PRD Update
- **Integration Strategy**: Recommendations that preserve current momentum while capturing value

This ensures good ideas aren't lost while maintaining focus on current priorities.

## Templates

See `docs/increments/_templates/charter.template.md` and `docs/increments/_templates/log.template.md`.

## Project Log

- At the end of each increment, update `docs/project-log.md` with a concise, human-readable summary (outcomes, artifacts, decisions, learnings)
- Keep increment-level details in `docs/increments/<id>/log.md`; the project log is a top-level, per-increment changelog

## Slash Commands ‚Äì Increment Workflow

### Use these in Cursor chat to automate common actions. They are instructions for the agent to execute edits/tests

### Execution Contract (applies to every command below)

- Always follow the Increment Method end-to-end.
- Identify the current increment by reading `docs/increments/**/charter.md` in ascending order and selecting the first charter that is not marked as Done. Use its paired `log.md`.
- Any code or docs edits must be reflected in the increment artifacts before ending the turn:
  - Update the relevant Effort Tasks/ACs/Status in `docs/increments/<id>/charter.md`.
  - Append a concise entry to `docs/increments/<id>/log.md` summarizing Action, Files/Areas, Decisions, Issues/Risks, Learnings, Tests/Artifacts.
- After substantive code edits, run tests non-interactively and ensure they are green.
  - Default: `npm test -- tests/unit/`
  - If failures are obviously fixable, fix and re-run once; otherwise, note the failures in the IL and stop.
- Keep responses concise; include fenced code/commands only when necessary. Ask one clarifying question only if absolutely required; otherwise proceed with the next concrete step.
- Never mark an increment Done unless all ACs of the increment are met and exit criteria satisfied (tests green; demoable).

/il log `<summary>`

- Append a new entry to the current increment log with:
  - Summary: one to two sentences in plain, concise English that summarize the entry
  - Action: `<summary>`
  - Files/Areas: infer from recent edits; if unknown, leave placeholder
  - Decisions: infer from context; else placeholder
  - Issues/Risks: infer or placeholder
  - Learnings: infer or placeholder
  - Tests/Artifacts: link to any new tests or snapshots if available

/tdd plan `<effort-title>`

- For the given Effort, generate a minimal TDD plan: tests to write first (fail), fixtures/snapshots needed, and run commands.
- Insert under the Effort‚Äôs Tests and Steps sections in the charter.

/test gen playwright `<name>`

- Create a Playwright test skeleton `tests/e2e/<name>.spec.ts` matching the ACs in the current Effort.
- Include `data-testid` selectors and TODOs for assertions.

/p `<prompt>`

- Treat this as operating under the Increment Method guidelines.
- Assume the current increment is the latest under `docs/increments/` (max `pi-*`).
- Steps:
  1. Identify current increment (e.g., `pi-3`), link its `charter.md` and `log.md`.
  2. Summarize the user's intent (`<prompt>`) into a one-paragraph plan tied to the increment Focus.
  3. If needed, update the Charter: add/modify Effort, Tasks, ACs, Tests, Steps, Status.
  4. Apply a lean TDD loop: propose tests first; then minimal implementation; then verification.
  5. Append an entry to the Increment Log capturing actions/decisions/changes.
  6. Keep responses concise; include code fences only for code or commands.
- If ambiguity remains, ask one clarifying question but still propose the next concrete step.

Automation details (must do):

- Detect current increment per Execution Contract.
- Summarize the intent as a one-paragraph plan tied to the increment Focus.
- If work changes scope/status, reflect it in the charter Effort sections.
- Run tests after edits and capture results in the IL entry.

/p -f `<feedback>`

- Process feedback/concerns/feature requests contextually without immediate action.
- Assessment framework:
  1. **Context Analysis**: Evaluate against completed work, current increment progress, PRD goals, and project roadmap.
  2. **Categorization**: Identify as Already Planned, Enhancement, New Feature, Concern/Risk, or Process Improvement.
  3. **Priority Assessment**: Determine if feedback should be: Immediate (enhances current increment), Next Increment, Backlog, or PRD Update.
  4. **Integration Strategy**: Propose how to incorporate without disrupting current priorities.
- Response format:
  - Brief assessment summary explaining the reasoning
  - Integration recommendation with timing
  - Any updates to increment charter, PRD, or backlog as appropriate
  - Highlight if feedback is already addressed in existing plans
- Goal: Capture value while maintaining current momentum and focus.

/pl log `<summary>`

- Append a new entry to the project-level log at `docs/project-log.md` with:
  - Entry header: latest increment id (e.g., PI-1) + date
  - Summary: `<summary>`
  - Artifacts: link to increment charter/log and any demo assets
  - Major efforts and status: pulled from the charter
  - Tests at close: unit and e2e counts
  - Decisions/Learnings/Risks: summarize from increment log

### Guardrails

- Placeholders in this file must be wrapped in backticks (e.g., `<summary>`) to avoid MD033.
- Always prefer absolute workspace paths when running commands.
- Use non-interactive flags and avoid pagers in commands.
